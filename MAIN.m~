function MAIN()
hfig = setupExperiment();

end

function hfig = setupExperiment()
hfig = setupExperiment();
params = getparams();
handles = struct();
hfig = figure('UserData',handles); 
hfig.UserData.handles.params = params; 
hfig.UserData.handles.state = 1; % fixation;
hsub = axis();
hold on; 
axis off 
grid off 
hfig.Units = 'normalized';
hfig.outerposition = [0 0 1 1];
hfig.s
 % get the figure and axes handles
 hFig = gcf;
 hAx  = gca;
 % set the figure to full screen
 set(hFig,'units','normalized','outerposition',[0 0 1 1]);
 % set the axes to full screen
 set(hAx,'Unit','normalized','Position',[0 0 1 1]);
 % hide the toolbar
 set(hFig,'menubar','none')
 % to hide the title
 set(hFig,'NumberTitle','off');

 

dat.pressed = 0;
%% fixation 
hsca = scatter(0,0,params.size,'filled','MarkerFaceColor','r',...
    'ButtonDownFcn',@fixpressed,...
    'UserData',dat,...
    'Visible','on');
hfig.UserData.handles.hsca = hsca; 
%% target button 
htar = scatter(0.8,0,params.size,'filled','MarkerFaceColor','b',...
    'ButtonDownFcn',@buttonpressed,...
    'UserData',dat,...
    'Visible','off');
hfig.UserData.handles.htar = htar; 
xlim([-1 1]); 
ylim([-1 1]);
drawnow;

%% run one trial button  
hrunOneTrial = uicontrol(hfig); 
hrunOneTrial.Style = 'pushbutton';
hrunOneTrial.String = 'Run One Trial'; 
hrunOneTrial.Callback = @runOneTrial;
hrunOneTrial.Units = 'normalized';
hrunOneTrial.Position = [0.8 0 0.2 0.1];
hfig.UserData.handles.hrunOneTrial = hrunOneTrial;
%% run experiment 
hrunExperiment = uicontrol(hfig); 
hrunExperiment.Style = 'pushbutton';
hrunExperiment.String = 'Run Experiment'; 
hrunExperiment.Callback = @runExperiment;
hrunExperiment.Units = 'normalized';
hrunExperiment.Position = [0.2 0 0.2 0.1];
myDataStr = evalc('disp(params)');
myDataStr2 = strrep(myDataStr, sprintf('\n'), '<br />');
set(hrunExperiment, 'TooltipString', ['<html><pre><font face="courier new">' myDataStr2 '</font>'])
hfig.UserData.handles.hrunExperiment = hrunExperiment;
end

function runExperiment(hfig,params)
%% set loop 
hfig.UserData.handles.startT = tic;
for i = 1:params.trials % loop on trials 
    title(sprintf('trial %d fixation started',i));
    runTrial(hfig,params,i); 
end

end

function runTrial(hfig,params,trialnum)
buttonMask(hfig,'hide');
%% fixation 
moveTargetRandom(hfig);
hsca = hfig.UserData.handles.hsca;
htar = hfig.UserData.handles.htar;
hfig.UserData.handles.state = 1; % fixation 
% choose random location for target to start at 

% wait for prep time params.trials      = 5.0;  % number of trials (blocks) 
hsca.Visible = 'on'; % show the middle dot 
drawnow; 
waitFor(params.fixation); % fixation 

%% preperations 
title(sprintf('prep trial %d started',trialnum));
hfig.UserData.handles.state = 2; % preperation 
htar.MarkerFaceColor = 'b'; % show target after fixation 
htar.Visible = 'on';% show target after fixation 
drawnow; 
waitFor(params.preperation);  % wait for prep 
hsca.MarkerFaceColor = 'g';  % change fixation to go 
drawnow; 
%% movement 
hfig.UserData.handles.userpressed = 0;
hfig.UserData.handles.state = 3; %movement

hfig.UserData.handles.htar.UserData.movecount = 0; % have not moved. 
hfig.UserData.handles.htar.UserData.totalmoves = params.step; % have not moved. 
while hfig.UserData.handles.htar.UserData.movecount <= params.step
    mvcnt = hfig.UserData.handles.htar.UserData.movecount;
    hfig.UserData.handles.userpressed = 0; % set pressed to zero 
%     ttluse = sprintf('mov %d/%d',mvcnt,params.step);title(ttluse);
    % fix move steps probelm - it moves a bunch in between steps introduce
    % step counter 
    startMove = tic; 
    while toc(startMove) < params.movement % while time exists  
        pause(0.01);
    end
    didpress = hfig.UserData.handles.userpressed; % read press state 
    if ~didpress
        moveTarget(hfig)
    end
end
htar.Visible = 'off';% hide target at end of trial 
hsca.MarkerFaceColor = 'r';  % change fixation to stop 
drawnow; 
buttonMask(hfig,'show');
end

function fixpressed(obj,event)
end

function buttonpressed(obj,event)
hfig = get(gcf);
if hfig.UserData.handles.state == 3 
    hfig.UserData.handles.userpressed = 1;
    moveTarget(hfig);
else % report pressed during other state 
end
    

% hfig.UserData.handles.htar.UserData.pressed = 1;
end

function waitFor(timewait)
startt = tic;
while toc(startt) < timewait
end
end

function moveTarget(hfig)
hfig.UserData.handles.htar.UserData.movecount = hfig.UserData.handles.htar.UserData.movecount + 1;
m = hfig.UserData.handles.htar.UserData.movecount;
total =  hfig.UserData.handles.htar.UserData.totalmoves;
if logical(hfig.UserData.handles.userpressed)
    ttluse = sprintf('mov %d/%d user pressed',m,total);title(ttluse);
    hfig.UserData.handles.userpressed = 0;
else
    ttluse = sprintf('mov %d/%d user did not press',m,total);title(ttluse);
end

targetloc = hfig.UserData.handles.params.targetloc;
x = hfig.UserData.handles.htar.XData; 
y = hfig.UserData.handles.htar.YData; 
postargidx = ~ismember(targetloc,[x y], 'rows');
postargets = targetloc(postargidx,:);
rowidx = randperm(size(postargets,1),1); % choose a random target from possible targets 
hfig.UserData.handles.htar.XData = postargets(rowidx,1);
hfig.UserData.handles.htar.YData = postargets(rowidx,2);

drawnow;
end

function moveTargetRandom(hfig)
targetloc = hfig.UserData.handles.params.targetloc;
postargets = targetloc;
rowidx = randperm(size(postargets,1),1); % choose a random target from possible targets 
hfig.UserData.handles.htar.XData = postargets(rowidx,1);
hfig.UserData.handles.htar.YData = postargets(rowidx,2);
end

function runOneTrial(obj,event)

hfig = gcf; 
buttonMask(hfig,'hide');
runTrial(hfig,hfig.UserData.handles.params,1); 
buttonMask(hfig,'show');
end

function buttonMask(hfig,task)
switch task 
    case 'hide'
        hfig.UserData.handles.hrunOneTrial.Visible = 'off';
        hfig.UserData.handles.hrunExperiment.Visible = 'off';
    case 'show'
        
        hfig.UserData.handles.hrunOneTrial.Visible = 'on';
        hfig.UserData.handles.hrunExperiment.Visible = 'on';
end
end
